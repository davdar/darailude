module FP.Prelude.TemplateHaskell where

import FP.Prelude.Core
import Language.Haskell.TH
import Language.Haskell.TH.Syntax
import FP.Prelude.Lens
import FP.Prelude.Effects
import FP.Prelude.Monads ()
import FP.Prelude.DSL
import FP.Prelude.Lib

import qualified Prelude

class MonadQ (m ‚à∑ ‚òÖ ‚Üí ‚òÖ) where qio ‚à∑ Q a ‚Üí m a

instance Functor Q where map = mmap
instance Monad Q where {return = Prelude.return;(‚â´=) = (Prelude.>>=)}
instance MonadIO Q where io = runIO
instance MonadQ Q where qio = id


instance Apply Exp where (‚ãÖ) = AppE
instance Tup Exp where tup = TupE
instance Apply Type where (‚ãÖ) = AppT
instance Tup Type where tup ts = TupleT (ùïö $ length ts) ‚ãÖ| ts
instance Tup Pat where tup = TupP
instance Arrow Type where f ‚á® x = ArrowT ‚ãÖ f ‚ãÖ x

makeList ‚à∑ [Exp] ‚Üí Exp
makeList xs = foldrOn xs (ConE '[]) $ \ e es ‚Üí ConE '(:) ‚ãÖ e ‚ãÖ es

makeString ‚à∑ ùïä ‚Üí Exp
makeString = LitE ‚àò StringL ‚àò chars
      
conName ‚à∑ Con ‚Üí Name
conName (NormalC n _) = n
conName (RecC n _) = n
conName (InfixC _ n _) = n
conName (ForallC _ _ c) = conName c

tyVarBndrName ‚à∑ TyVarBndr ‚Üí Name
tyVarBndrName (PlainTV name) = name
tyVarBndrName (KindedTV name _) = name

sclause ‚à∑ [Pat] ‚Üí Exp ‚Üí Clause
sclause p b = Clause p (NormalB b) []

smatch ‚à∑ Pat ‚Üí Exp ‚Üí Match
smatch p b = Match p (NormalB b) []

coerceSimpleCon ‚à∑ Con ‚Üí Maybe (Name, [Type])
coerceSimpleCon (NormalC name strictTypes) = Just (name, map snd strictTypes)
coerceSimpleCon (RecC name varStrictTypes) = Just (name, map ff varStrictTypes)
  where ff (_,_,x) = x
coerceSimpleCon (InfixC (_, typeL) name (_, typeR)) = Just (name, [typeL, typeR])
coerceSimpleCon (ForallC _ _ _) = Nothing

tyConIL ‚à∑ Prism Info Dec
tyConIL = Prism
  { view = \case
      TyConI d ‚Üí Just d
      _ ‚Üí Nothing
  , inject = TyConI
  }

dataDL ‚à∑ Prism Dec (Cxt, Name, [TyVarBndr], [Con], [Name])
dataDL = Prism
  { view = \case
      DataD cx t args cs ders ‚Üí Just (cx, t, args, cs, ders)
      _ ‚Üí Nothing
  , inject = \ (cx, t, args, cs, ders) ‚Üí DataD cx t args cs ders
  }

newtypeDL ‚à∑ Prism Dec (Cxt, Name, [TyVarBndr], Con, [Name])
newtypeDL = Prism
  { view = \case
      NewtypeD cx t args c ders ‚Üí Just (cx, t, args, c, ders)
      _ ‚Üí Nothing
  , inject = \ (cx, t, args, c, ders) ‚Üí NewtypeD cx t args c ders
  }

coerceADT ‚à∑ Dec ‚Üí Maybe (Cxt, Name, [TyVarBndr], [Con], [Name])
coerceADT d =
  view dataDL d
  <|>
  (ff ^‚àò view newtypeDL) d
  where
    ff (cx, t, args, c, ders) = (cx, t, args, [c], ders)

coerceSingleConADT ‚à∑ Dec ‚Üí Maybe (Cxt, Name, [TyVarBndr], Con, [Name])
coerceSingleConADT dec = do
  (cx, t, args, cs, ders) ‚Üê coerceADT dec
  c ‚Üê view singleL cs
  return(cx, t, args, c, ders)

recCL ‚à∑ Prism Con (Name, [VarStrictType])
recCL = Prism
  { view = \case
      RecC n fs ‚Üí Just (n, fs)
      _ ‚Üí Nothing
  , inject = \ (n, fs) ‚Üí RecC n fs
  }
