module FP.Parser.Mixfix where

import FP.Prelude
import FP.Pretty
import FP.Parser.Parser

data Mixes t a = Mixes
  { mixesPre  ‚à∑ Parser t (a ‚Üí a)
  , mixesPost ‚à∑ Parser t (a ‚Üí a)
  , mixesInf  ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  , mixesInfl ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  , mixesInfr ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  }

instance Monoid (Mixes t a) where
  null = Mixes mzero mzero mzero mzero mzero
  Mixes pre‚ÇÅ post‚ÇÅ inf‚ÇÅ infl‚ÇÅ infr‚ÇÅ ‚ß∫ Mixes pre‚ÇÇ post‚ÇÇ inf‚ÇÇ infl‚ÇÇ infr‚ÇÇ = 
    Mixes (pre‚ÇÅ <‚ß∫> pre‚ÇÇ) (post‚ÇÅ <‚ß∫> post‚ÇÇ) (inf‚ÇÅ <‚ß∫> inf‚ÇÇ) (infl‚ÇÅ <‚ß∫> infl‚ÇÇ) (infr‚ÇÅ <‚ß∫> infr‚ÇÇ)

data Mix t a =
    Pre  ‚Ñï (Parser t (a ‚Üí a))
  | Post ‚Ñï (Parser t (a ‚Üí a))
  | Inf  ‚Ñï (Parser t (a ‚Üí a ‚Üí a))
  | Infl ‚Ñï (Parser t (a ‚Üí a ‚Üí a))
  | Infr ‚Ñï (Parser t (a ‚Üí a ‚Üí a))
  | Terminal (Parser t a)

data Mixfix t a = Mixfix 
  { mixfixTerminals ‚à∑ Parser t a
  , mixfixLevels ‚à∑ ‚Ñï ‚á∞ Mixes t a
  }
instance Monoid (Mixfix t a) where
  null = Mixfix mzero bot
  Mixfix ts‚ÇÅ ls‚ÇÅ ‚ß∫ Mixfix ts‚ÇÇ ls‚ÇÇ = Mixfix (ts‚ÇÅ <‚ß∫> ts‚ÇÇ) (ls‚ÇÅ ‚ß∫ ls‚ÇÇ)

mix ‚à∑ Mix t a ‚Üí Mixfix t a
mix (Pre l pre) = null {mixfixLevels = l ‚Ü¶ null {mixesPre = pre}}
mix (Post l post) = null {mixfixLevels = l ‚Ü¶ null {mixesPost = post}}
mix (Inf l inf) = null {mixfixLevels = l ‚Ü¶ null {mixesInf = inf}}
mix (Infl l infl) = null {mixfixLevels = l ‚Ü¶ null {mixesInfl = infl}}
mix (Infr l infr) = null {mixfixLevels = l ‚Ü¶ null {mixesInfr = infr}}
mix (Terminal term) = null {mixfixTerminals = term}

-- PRE (PRE (x INFR (PRE (PRE y))))
-- PRE PRE x INFR PRE PRE y
-- 
-- ((((x POST) POST) INFL y) POST) POST
-- x POST POST INFL y POST POST

mixfixParser ‚à∑ ‚àÄ t a. Mixfix t a ‚Üí Parser t a
mixfixParser (Mixfix terms levels‚ÇÄ) = loop levels‚ÇÄ
  where
    loop ‚à∑ ‚Ñï ‚á∞ Mixes t a ‚Üí Parser t a
    loop levels = case removeDict levels of
      Nothing ‚Üí terms
      Just ((i,mixes),levels') ‚Üí 
        let nextLevel = loop levels'
        in buildLevel i nextLevel mixes
    buildLevel ‚à∑ ‚Ñï ‚Üí Parser t a ‚Üí Mixes t a ‚Üí Parser t a
    buildLevel i nextLevel mixes = mconcat
      [ do
          x ‚Üê nextLevel
          mconcat
            [ pAppendError ("infixl " ‚ß∫ ppString i) $ levelInflAfterOne x nextLevel mixes
            , pAppendError ("infix "  ‚ß∫ ppString i) $ levelInfAfterOne  x nextLevel mixes
            , pAppendError ("infixr " ‚ß∫ ppString i) $ levelInfrAfterOne x nextLevel mixes
            , return x
            ]
      , pAppendError ("infixr " ‚ß∫ ppString i) $ levelInfrNotAfterOne nextLevel mixes
      ]
    levelInflAfterOne ‚à∑ a ‚Üí Parser t a ‚Üí Mixes t a ‚Üí Parser t a
    levelInflAfterOne x nextLevel mixes = do
      fxs ‚Üê pOneOrMoreGreedy $ mconcat
        [ mixesPost mixes
        , do
            f ‚Üê mixesInfl mixes
            x‚ÇÇ ‚Üê nextLevel
            return $ \ x‚ÇÅ ‚Üí f x‚ÇÅ x‚ÇÇ
        ]
      return $ compose (reverse fxs) x
    _levelInfr ‚à∑ Parser t a ‚Üí Mixes t a ‚Üí Parser t a
    _levelInfr nextLevel mixes = do
      fxs ‚Üê pOneOrMoreGreedy $ mconcat
        [ mixesPre mixes
        , do
            x‚ÇÅ ‚Üê nextLevel
            f ‚Üê mixesInfr mixes
            return $ \ x‚ÇÇ ‚Üí f x‚ÇÅ x‚ÇÇ
        ]
      x ‚Üê nextLevel
      return $ compose fxs x
    levelInfrAfterOne ‚à∑ a ‚Üí Parser t a ‚Üí Mixes t a ‚Üí Parser t a
    levelInfrAfterOne x‚ÇÅ nextLevel mixes = do
      f ‚Üê mixesInfr mixes
      levelInfrAfterOneCombo (\ x‚ÇÇ ‚Üí f x‚ÇÅ x‚ÇÇ) nextLevel mixes
    levelInfrNotAfterOne ‚à∑ Parser t a ‚Üí Mixes t a ‚Üí Parser t a
    levelInfrNotAfterOne nextLevel mixes = do
      f ‚Üê mixesPre mixes
      levelInfrAfterOneCombo f nextLevel mixes
    levelInfrAfterOneCombo ‚à∑ (a ‚Üí a) ‚Üí Parser t a ‚Üí Mixes t a ‚Üí Parser t a
    levelInfrAfterOneCombo f nextLevel mixes = do
      fxs ‚Üê pManyGreedy $ mconcat
        [ mixesPre mixes
        , do
            x‚ÇÅ ‚Üê nextLevel
            f' ‚Üê mixesInfr mixes
            return $ \ x‚ÇÇ ‚Üí f' x‚ÇÅ x‚ÇÇ
        ]
      x‚ÇÇ ‚Üê nextLevel
      return $ f $ compose fxs x‚ÇÇ
    levelInfAfterOne ‚à∑ a ‚Üí Parser t a ‚Üí Mixes t a ‚Üí Parser t a
    levelInfAfterOne x‚ÇÅ nextLevel mixes = do
      f ‚Üê mixesInf mixes
      x‚ÇÇ ‚Üê nextLevel
      return $ f x‚ÇÅ x‚ÇÇ

-- Sample Expression Language

data ExpToken =
    ETWhitespace ùïä
  | ETLParen
  | ETRParen
  | ETSymbol ùïä
  | ETNatural ‚Ñï
  | ETPlus     -- infixr   5
  | ETTimes    -- infixr   6
  | ETPower    -- infixl   7
  | ETFact     -- postfix  7
  | ETNegative -- prefix   8
  | ETEqual    -- infix    5
makePrisms ''ExpToken
makePrettySum ''ExpToken

tokExp ‚à∑ Parser ‚ÑÇ ExpToken
tokExp = mconcat
  [ inject eTWhitespaceL ‚àò ùï§ ^$ pOneOrMoreGreedy $ pSatisfies "space" isSpace 
  , inject eTLParenL ^$ void $ pLit '('
  , inject eTRParenL ^$ void $ pLit ')'
  , inject eTSymbolL ‚àò ùï§ ^$ pOneOrMoreGreedy $ pSatisfies "letter" isLetter
  , inject eTNaturalL ‚àò ùï§read ‚àò ùï§ ^$ pOneOrMoreGreedy $ pSatisfies "digit" isDigit
  , inject eTPlusL ^$ void $ pLit '+'
  , inject eTTimesL ^$ void $ pLit '*'
  , inject eTPowerL ^$ void $ pLit '^'
  , inject eTFactL ^$ void $ pLit '!'
  , inject eTNegativeL ^$ void $ pLit '-'
  , inject eTEqualL ^$ void $ pLit '='
  ]

testTokExpSuccess ‚à∑ IO ()
testTokExpSuccess = tokenizeIOMain tokExp $ tokens "1 + 2 - 3 * 4 ^ 5 ! = 1"

data Atom =
    ASymbol ùïä
  | ANatural ‚Ñï
makePrettySum ''Atom

data Exp =
    EAtom Atom
  | ESum Exp Exp
  | EProduct Exp Exp
  | EExpo Exp Exp
  | EFact Exp
  | ENegate Exp
  | EEquality Exp Exp
makePrisms ''Exp
makePrettySum ''Exp

parseExp ‚à∑ Parser ExpToken Exp 
parseExp = pError "exp" $ mixfixParser $ concat
  [ mix $ Terminal $ do
      void $ pSatisfies "lparen" $ shape eTLParenL
      x ‚Üê parseExp
      void $ pSatisfies "rparen" $ shape eTRParenL
      return x
  , mix $ Terminal $ EAtom ‚àò ASymbol ^$ pShaped "symbol" $ view eTSymbolL
  , mix $ Terminal $ EAtom ‚àò ANatural ^$ pShaped "natural" $ view eTNaturalL
  , mix $ Infr (ùïü 5) $ const ESum ^$ surroundWhitespace $ pShaped "plus" $ view eTPlusL
  , mix $ Infr (ùïü 6) $ const EProduct ^$ surroundWhitespace $ pShaped "times" $ view eTTimesL
  , mix $ Infl (ùïü 7) $ const EExpo ^$ surroundWhitespace $ pShaped "power" $ view eTPowerL
  , mix $ Post (ùïü 7) $ const EFact ^$ preWhitespace $ pShaped "fact" $ view eTFactL
  , mix $ Pre  (ùïü 8) $ const ENegate ^$ postWhitespace $ pShaped "neg" $ view eTNegativeL
  , mix $ Inf  (ùïü 5) $ const EEquality ^$ surroundWhitespace $ pShaped "equal" $ view eTEqualL
  ]
  where
    surroundWhitespace ‚à∑ Parser ExpToken a ‚Üí Parser ExpToken a
    surroundWhitespace xM = do
      void $ pOptionalGreedy $ pSatisfies "whitespace" $ shape eTWhitespaceL
      x ‚Üê xM
      void $ pOptionalGreedy $ pSatisfies "whitespace" $ shape eTWhitespaceL
      return x
    preWhitespace ‚à∑ Parser ExpToken a ‚Üí Parser ExpToken a
    preWhitespace xM = do
      void $ pOptionalGreedy $ pSatisfies "whitespace" $ shape eTWhitespaceL
      xM
    postWhitespace ‚à∑ Parser ExpToken a ‚Üí Parser ExpToken a
    postWhitespace xM = do
      x ‚Üê xM
      void $ pOptionalGreedy $ pSatisfies "whitespace" $ shape eTWhitespaceL
      return x

testParseExpSuccess ‚à∑ IO ()
testParseExpSuccess = parseIOMain parseExp *$ tokenizeIO tokExp $ tokens "(((((- 1))) + 2 + 3 * 4 ^ 5 ^ 6 !))"

testParseExpFailure1 ‚à∑ IO ()
testParseExpFailure1 = parseIOMain parseExp *$ tokenizeIO tokExp $ tokens "((9 = (((- 1))) + 2 + 3 * 4 ^ 5 ^ 6 !))"

testParseExpFailure2 ‚à∑ IO ()
testParseExpFailure2 = parseIOMain parseExp *$ tokenizeIO tokExp $ tokens "(((((- 1))) + 2 + 3 * 4 ^ 5 ^ 6 ! = 0))"
